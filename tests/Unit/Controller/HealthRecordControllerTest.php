<?php

namespace App\Tests\Unit\Controller;

use App\Entity\HealthRecord;
use DateTime;
use Doctrine\ORM\EntityManagerInterface;
use Exception;
use Nebkam\FluentTest\RequestBuilder;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

class HealthRecordControllerTest extends WebTestCase
{
    private ?int $insertedHealthRecordId;

    /**
     * @throws Exception
     */
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testCreateHealthRecord(): void
    {
        $client = static::createClient();
        $response = RequestBuilder::create($client)
            ->setMethod('POST')
            ->setUri('/health_record')
            ->setContent('
                {
                      "vet": 12,
                      "pet": 1,
                      "examination": 3,
                      "startedAt": "2024-09-07T10:12:00.393Z",
                      "finishedAt": "2024-09-07T12:35:00.393Z",
                      "comment": "gotta checc if everything is ok"
                }
            ')
            ->getResponse();

        self::assertResponseIsSuccessful();
        self::assertResponseStatusCodeSame(201);

        $em = $client->getContainer()->get(EntityManagerInterface::class);
        /**
         * @var $healthRecord HealthRecord
         */
        $healthRecord = $em->getRepository(HealthRecord::class)->find($response->getJsonContent()["id"]);
        self::assertStringContainsString('gotta checc',$healthRecord->getComment());
        self::assertEquals(new DateTime('2024-09-07T10:12:00.393Z'),$healthRecord->getStartedAt());
        self::assertEquals(new DateTime('2024-09-07T12:35:00.393Z'),$healthRecord->getFinishedAt());
        self::assertEquals(1,$healthRecord->getPet()->getId());
        self::assertEquals(12,$healthRecord->getVet()->getId());
        self::assertEquals(3,$healthRecord->getExamination()->getId());
    }

    public function testEditHealthRecord():void
    {
        $client = static::createClient();
        $response = RequestBuilder::create($client)
            ->setMethod('PUT')
            ->setUri('/health_record/%s',50)
            ->setContent('
                {
                      "vet": 12,
                      "pet": 1,
                      "examination": 3,
                      "startedAt": "2024-09-07T10:30:00.000Z",
                      "finishedAt": "2024-09-07T12:55:00.000Z",
                      "comment": "Changed minor things just to check if everything is working."
                }
            ')
            ->getResponse();

        $em = $client->getContainer()->get(EntityManagerInterface::class);
        /**
         * @var $healthRecord HealthRecord
         */
        $healthRecord = $em->getRepository(HealthRecord::class)->find($response->getJsonContent()["id"]);
        self::assertStringContainsString("Changed minor things just to check if everything is working.",$healthRecord->getComment());
        self::assertEquals(new DateTime('2024-09-07T10:30:00.000Z'),$healthRecord->getStartedAt());
        self::assertEquals(new DateTime('2024-09-07T12:55:00.000Z'),$healthRecord->getFinishedAt());
        self::assertResponseIsSuccessful(200);
    }

    public function testGetUserHealthRecords(): void
    {
        $client = static::createClient();
        $response = RequestBuilder::create($client)
            ->setMethod('GET')
            ->setUri('/user/%s/health_records','18')
        ->getResponse();

        self::assertResponseStatusCodeSame(200);
        self::assertResponseIsSuccessful();
        self::assertIsArray($response->getJsonContent());
    }

    public function testDeleteHealthRecord():void
    {
        $client = static::createClient();
        $response = RequestBuilder::create($client)
            ->setMethod('DELETE')
            ->setUri('/health_record/%s',51)
            ->getResponse();

        self::assertResponseIsSuccessful();
    }

    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
