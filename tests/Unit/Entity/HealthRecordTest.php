<?php

namespace App\Tests\Unit\Entity;

use App\Entity\Examination;
use App\Entity\HealthRecord;
use App\Entity\User;
use App\Tests\DatabasePrimer;
use App\Tests\Unit\BaseTestCase;
use DateTime;

class HealthRecordTest extends BaseTestCase
{
    private Examination $mockExamination;

    private User $mockVet;

    protected function setUp(): void
    {
        parent::setUp();

        $this->mockExamination = $this->makeMockExamination();
        $this->mockVet = $this->makeMockVet();
    }

    public function testMakeHealthRecord(): void
    {
        $healthRecord = (new HealthRecord())
            ->setMadeByVet(false)
            ->setStatus('waiting')
            ->setNotifiedDayBefore(false)
            ->setNotifiedWeekBefore(false)
            ->setStartedAt(new DateTime('2024-03-25 20:07:56'))
            ->setFinishedAt(new DateTime('2024-03-25 22:07:56'))
            ->setAtPresent(false)
            ->setExamination($this->mockExamination)
            ->setVet($this->mockVet)
            ->setComment('comment123');

        $this->em->persist($healthRecord);
        $this->em->flush();

        $healthRecordRepo = $this->em->getRepository(HealthRecord::class);
        /**
         * @var $healthRecordPersisted HealthRecord
         */
        $healthRecordPersisted = $healthRecordRepo->findOneBy(['comment'=>'comment123']);

        $this->assertEquals('comment123', $healthRecordPersisted->getComment());
        $this->assertEquals('waiting',$healthRecordPersisted->getStatus());
        $this->assertFalse($healthRecordPersisted->getNotifiedDayBefore());
        $this->assertFalse($healthRecordPersisted->getNotifiedWeekBefore());
        $this->assertFalse($healthRecordPersisted->isMadeByVet());
        $this->assertEquals('Marko',$healthRecordPersisted->getVet()->getFirstName());
        $this->assertEquals('Milosevic',$healthRecordPersisted->getVet()->getLastName());
        $this->assertEquals(60,$healthRecordPersisted->getExamination()->getDuration());
        $this->assertEquals('2024-03-25 20:07:56',$healthRecordPersisted->getStartedAt());
        $this->assertEquals('2024-03-25 22:07:56',$healthRecordPersisted->getFinishedAt());

    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        $this->em->close();
        $this->em = null;
    }
}