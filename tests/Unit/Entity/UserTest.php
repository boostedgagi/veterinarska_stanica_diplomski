<?php

namespace App\Tests\Unit\Entity;

use App\Entity\User;
use App\Tests\Unit\BaseTestCase;
use PHPUnit\Framework\TestCase;

class UserTest extends BaseTestCase
{
    private User $mockUser;
    private User $mockVet;
    private User $mockUserWithVet;

    protected function setUp(): void
    {
        parent::setUp();

        $this->mockUser = $this->makeMockUser();
        $this->mockVet = $this->makeMockVet();
        $this->mockUserWithVet = $this->makeMockUser('mockuser@gmail.com',$this->mockVet);
    }

    protected function testCreatedUser():void
    {
        $this->assertEquals('Marko',$this->mockUser->getFirstName());
        $this->assertEquals('Patarcic',$this->mockUser->getLastName());
        $this->assertStringContainsString('patarcic',$this->mockUser->getEmail());
        $this->assertEquals(3,$this->mockUser->getTypeOfUser());
        $this->assertEquals(1,$this->mockUser->isAllowed());
        $this->assertEquals('0643387626',$this->mockUser->getPhone());
        $this->assertNull($this->mockUser->getVet());
    }

    protected function testCreatedUserWithVet():void
    {
        $userWithVet = $this->mockUserWithVet;
        $hisVet = $userWithVet->getVet();

        $this->assertEquals('mockuser@gmail.com',$userWithVet->getEmail());

        $this->assertEquals('Marko',$hisVet->getFirstName());
        $this->assertEquals('Milosevic',$hisVet->getLastName());
        $this->assertEquals('vet@vetShop.com',$hisVet->getEmail());
        $this->assertEquals('0631669825',$hisVet->getPhone());
        $this->assertTrue($hisVet->isAllowed());
    }

    public function testCreatedVet():void
    {


        self::assertEquals('Marko',$this->mockVet->getFirstName());
        self::assertEquals('Milosevic',$this->mockVet->getLastName());
        self::assertSame(2,$this->mockVet->getTypeOfUser());
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub


        $this->em->close();
        $this->em = null;
    }
}